hello  wolcome Git

mkdir  创建目录 

pwd 显示当前目录

git init 把目录编程G it可以管理的仓库 ，会生成.git目录 目录会隐藏 ，用 ls -ah 命令就可以看见了 

git add read.txt  把文件添加到仓库 

git commit -m   把文件提交到仓库  -m 后边“”是注释提交内容 


git diff 查看修改的内容

git status 查看仓库当前状态

cat read.txt 查看文件内容


git log 查看提交日志 从近到远显示 

git log --pretty=oneline


git reset --hard HEAD^ 回退到上一个版本 上上个版本用 HEAD^^  往上100个版本可以写成HEAD~100

git reset --hard 3628547 回退之后再返回来  可以依据commit id （你记得commit id）

git reflog 查看命令历史 来查找未来的版本ID（如果不记得commit id 该怎么恢复？） 


git remote add origin git@github.com:XXX/XXX.git 关联远程库

git push -u origin master 第一次推送master分支的所有内容,由于远程库是空的，我们第一次推送master分支时，加上了-u参数，
Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来

git push origin master 推送最新的修改内容到远程库 （不用加-u参数）

git clone git@github.com:michaelliao/gitskills.git 从远程库克隆一个本地库 


git checkout -- file 	 场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改，file是修改的文件（如read.txt）

git reset HEAD file  	 场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，
			    分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

git reset --hard HEAD^	 场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，直接版本回退，不过前提是没有推送到远程库。

git rm test.txt  删除一个文件。


git branch  列出所有分支，当前分支前边会标有*号。

git branch dev   创建dev分支。

git checkout dev  切换到dev分支。

git checkout -b dev   创建dev分支并切换到dev分支 。

git checkout master 切换到master分支。

git merge dev 合并指定分支到当前分支。要合并的指定分支是dev，当前分支可以用git branch 查看带*号的分支。

git branch -d dev  删除Dev分支。

-------------------------------------------------------------------------------------
分支策略
比较 git merge 与 git merge --no-ff 的区别
git merge 默认合并的方式是 Fast forward，这种模式下，删除分支后，会丢掉分支信息。
git merge --no-ff 强制禁用Fash forward模式，git在merge（合并）时会生成一个新的commit,
          这样，从分支历史上就可以看出分支信息。

-------------------------------------------------------------------------------------

两个分支都有修改并提交，合并时会导致冲突。
冲突提示：
$ git merge dev
Auto-merging read.txt
CONFLICT (content): Merge conflict in read.txt
Automatic merge failed; fix conflicts and then commit the result.

CONFLICT 冲突

---------------------------------------------------------------------------------------
创建远程库 
1，查看主目录下有没有.ssh  (C:\Users\vn0umhp\.ssh)
2, 如果没有.ssh文件 要执行下边命令创建SSH Key：
ssh-keygen -t rsa -C "youremail@example.com" 邮件地址是你自己的github地址 
执行之后，C:\Users\vn0umhp\.ssh下边存在id_rsa和id_rsa.pub两个文件，
id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥

3，主目录下.ssh中存在id_rsa和id_rsa.pub两个文件之后，
登陆GitHub，打开“Account settings”，“SSH Keys”页面，
点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容。
点“Add Key”，你就应该看到已经添加的Key。

在GitHub中创建仓库
1，登录GitHub，点击 New repository创建一个仓库；
2，在Repository name中填入仓库名；
3，点击“Create repository”按钮，就成功地创建了一个新的Git仓库。

在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。
---------------------------------------------------------------------------------------------
把本地库推送到GitHub仓库中：
1，关联远程库，在本地仓库E:\learngit中运行命令：
$ git remote add origin git@github.com:michaelliao/learngit.git
michaelliao替换成自己的GitHub账户名，origin就是远程库的名字。

2，把本地库的所有内容推送到远程库中:
$ git push -u origin master

我执行命令的时候报错：
vn0umhp@WDWSPC093 MINGW64 /e/learngit (master)
$ git push -u origin master
ssh: connect to host github.com port 22: Connection refused
fatal: Could not read from remote repository.

原因是 主目录下的.ssh中缺少config文件；
解决方案： 
1）进入到主目录，创建一个config文件，因为无法cd 到.ssh目录，我直接在用户名目录下创建了一个config文件，创建之后再拷贝到.ssh目录下。
创建config文件用touch config命令。
vn0umhp@WDWSPC093 MINGW64 /e/learngit (master)
$ cd C:

vn0umhp@WDWSPC093 MINGW64 /c
$ cd Users

vn0umhp@WDWSPC093 MINGW64 /c/Users
$ cd vn0umhp

vn0umhp@WDWSPC093 MINGW64 ~
$ touch config

2）在confing中编辑如下内容：
Host github.com  
User xxxxx@xx.com  
Hostname ssh.github.com  
PreferredAuthentications publickey  
IdentityFile ~/.ssh/id_rsa  
Port 443

xxxxx@xx.com 是你注册github的邮箱
编辑保存之后，重新执行推送一下就成功了。

-----------------------------------------------------------------------------------------
SSH警告：
当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：
The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.
RSA key fingerprint is xx.xx.xx.xx.xx.
Are you sure you want to continue connecting (yes/no)?
这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。

Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：

Warning: Permanently added 'github.com' (RSA) to the list of known hosts.
这个警告只会出现一次，后面的操作就不会有任何警告了。

-----------------------------------------------------------------------
git status 修改的内容已经git add到暂存区时的提示内容： 
$ git status
On branch master
Your branch is up to date with 'origin/master'.

Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        modified:   read.txt

----------------------------------------------------------------------------

git status 修改的内容没有git add 到暂存区的提示内容： 
On branch master
Your branch is up to date with 'origin/master'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   read.txt

no changes added to commit (use "git add" and/or "git commit -a")

-----------------------------------------------------------------------------

git status 没有修改内容的提示内容：
On branch master
Your branch is up to date with 'origin/master'.

nothing to commit, working tree clean

------------------------------------------------------------------------------
mac 
mac自带Git，不用安装。
which  git  可以直接找出Git的安装目录 
直接使用命令关联远程仓库 
ssh-keygen -t rsa -C "youremail@example.com" 邮件地址是你自己的github地址
把生成的SSH公钥写进GitHub（与windows方法一致）

------------------------------------------------------------------------------
git pull origin master 
git 在pull或者合并分支的时候有时会遇到这个界面,意思是需要你 输入提交消息来解释为什么这种合并是必要的

窗口内容：
please enter a commit message to explain why this merge is necessary,
especially if it merges an updated upstream into a topic branch.

Lines starting with '#' will be ignored, and an empty message aborts the commit.

两种解决方案： 
第一：

1.按键盘字母 i 进入insert模式

2.修改最上面那行黄色合并信息
第二：
1.按键盘左上角"Esc"

2.输入冒号加wq   ":wq",  按回车键，意思就是就是忽略这个提示

--------------------------------------------------------------------------------
 
 