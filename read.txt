hello  wolcome Git

mkdir  创建目录 

pwd 显示当前目录

git init 把目录编程G it可以管理的仓库 ，会生成.git目录 目录会隐藏 ，用 ls -ah 命令就可以看见了 

git add read.txt  把文件添加到仓库 

git commit -m   把文件提交到仓库  -m 后边“”是注释提交内容 


git diff 查看修改的内容

git status 查看仓库当前状态

cat read.txt 查看文件内容


git log 查看提交日志 从近到远显示 

git log --pretty=oneline


git reset --hard HEAD^ 回退到上一个版本 上上个版本用 HEAD^^  往上100个版本可以写成HEAD~100

git reset --hard 3628547 回退之后再返回来  可以依据commit id （你记得commit id）

git reflog 查看命令历史 来查找未来的版本ID（如果不记得commit id 该怎么恢复？） 


git remote add origin git@github.com:XXX/XXX.git 关联远程库

git push -u origin master 第一次推送master分支的所有内容,由于远程库是空的，我们第一次推送master分支时，加上了-u参数，
Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来

git push origin master 推送最新的修改内容到远程库 （不用加-u参数）。

git push origin dev_lxf 推送最新内容到远程库的dev_lxf分支（如远程库没有dev_lxf，会自动创建dev_lxf分支）。

git clone git@github.com:michaelliao/gitskills.git 从远程库克隆一个本地库 


git checkout -- file 	 场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改，file是修改的文件（如read.txt）

git reset HEAD file  	 场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，
			    分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

git reset --hard HEAD^	 场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，直接版本回退，不过前提是没有推送到远程库。

git rm test.txt  删除一个文件。


git branch  列出所有分支，当前分支前边会标有*号。

git branch dev   创建dev分支。

git checkout dev  切换到dev分支。

git checkout -b dev   创建dev分支并切换到dev分支 。

git checkout master 切换到master分支。

git merge dev 合并指定分支到当前分支。要合并的指定分支是dev，当前分支可以用git branch 查看带*号的分支。



git branch -d dev  删除Dev分支（删除已合并过的分支）。

git branch -D dev  强制删除分支，Dev没有合并就删除。

git merge --no-ff -m "提交内容" dev  强制禁用Fash forward模式，git在merge（合并）时会生成一个新的commit,
          			     这样，从分支历史上就可以看出分支信息。


git log --graph 显示分支合并图。

git log --pretty=oneline 简化日志信息，将每个提交放在一行显示。

git log --graph --pretty=oneline --abbrev-commit 查看分支合并情况，包括分支合并图，一行显示，commitID缩略显示。



git stash 	把当前工作现场“储藏”起来，等以后恢复现场后继续工作。

git stash list  查看存储内容的保存现场

git stash apply 恢复现场，但是恢复后，stash内容并不删除,即用git stash list仍能看到stash

git stash drop	删除存储现场，删除之后用git stash list查看不到stash

git stash pop 	恢复的同时把stash也删了,相当于git stash apply和git stash drop一起操作。



git remote 	查看远程库信息。

git remote -v	查看远程库详细信息，如果没有推送权限，则看不到push地址。


git tag <name> 	默认标签打在最新的commit id 上，eg: git tag v2.0 。

git tag	<name> <commit id>	给历史版本打标签，需找到历史commit id，然后打标签 git tag v1.0 39ffc12

git tag -a v0.1 -m "version 0.1 released" 28f0328 	创建带有说明的标签，用-a指定标签名，-m指定说明文字

git tag -s v0.2 -m "signed version 0.2 released" fec145a  	-s用私钥签名一个标签。没有实现过方法。
								(签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对，就会报错)

git tag		查看标签,查看所有标签


git show <tagname> 	查看标签信息，eg: git show v0.9

git tag -d <tagname>	删除一个本地标签

git push origin <tagname>	推送一个本地标签；

git push origin --tags		推送全部未推送过的本地标签；

git push origin :refs/tags/<tagname>	删除一个远程标签。


rm -rf .git  目录取消Git仓库	
 


------------------------------------------------------------------------------------

多人协作的工作模式通常是这样：

首先，可以试图用git push origin branch-name推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to=origin/<branch-name> branch-name。

这就是多人协作的工作模式，一旦熟悉了，就非常简单。


具体操作：
（push 到远程，分支名必须相同才能成功？ 当前操作不能成功。）
小伙伴从远程库克隆（D盘）之后，只能看到Master分支。

步骤1： 小伙伴的本地库（D盘）。如果要在dev上开发，就必须创建远程origin的dev到本地，使用命令 git checkout -b dev origin/dev
	$ git checkout -b dev_Tim origin/dev_lxf
	Switched to a new branch 'dev_Tim'
	Branch 'dev_Tim' set up to track remote branch 'dev_lxf' from 'origin'.

步骤2：	在分支dev_Tim中修改并提交，最后push 到远程分支dev_lxf
	error: src refspec dev_lxf does not match any.
	error: failed to push some refs to 'git@github.com:ddxflqm/Learngit.git'
	
	分支名称不同，导致push失败。
	回退版本并删除该分支，重新创建dev_lxf分支，再次修改并提交，最后Push到 origin dev_lxf分支成功；

步骤3：	回到自己本地库（E盘），创建dev_lxf分支，修改并提交，最后Push到 origin dev_lxf分支。
	报错：
	推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，
	Git已经提示我们，
	先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送。

	$ git push origin dev_lxf
	To github.com:ddxflqm/Learngit.git
	 ! [rejected]        dev_lxf -> dev_lxf (fetch first)
	error: failed to push some refs to 'git@github.com:ddxflqm/Learngit.git'
	hint: Updates were rejected because the remote contains work that you do
	hint: not have locally. This is usually caused by another repository pushing
	hint: to the same ref. You may want to first integrate the remote changes
	hint: (e.g., 'git pull ...') before pushing again.
	hint: See the 'Note about fast-forwards' in 'git push --help' for details.

步骤4：	使用git pull 把最新的提交从origin/dev_lxf抓取下来。
	报错：
	git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，
	根据提示，设置dev和origin/dev的链接
	
	$ git pull
	remote: Counting objects: 3, done.
	remote: Compressing objects: 100% (1/1), done.
	remote: Total 3 (delta 1), reused 3 (delta 1), pack-reused 0
	Unpacking objects: 100% (3/3), done.
	From github.com:ddxflqm/Learngit
	   28f0228..82f89bf  dev_lxf    -> origin/dev_lxf
	There is no tracking information for the current branch.
	Please specify which branch you want to merge with.
	See git-pull(1) for details.

	    git pull <remote> <branch>

	If you wish to set tracking information for this branch you can do so with:

	    git branch --set-upstream-to=origin/<branch> dev_lxf

步骤5：	根据步骤4的提示，设置本地dev_lxf与origin/dev_lxf链接。

	$ git branch --set-upstream-to=origin/dev_lxf dev_lxf
	Branch 'dev_lxf' set up to track remote branch 'dev_lxf' from 'origin'.

步骤6： 再Pull，抓取origin/dev_lxf分支内容
	提示：git pull成功，抓取的内容与本地内容冲突，需要手动解决冲突。
	$ git pull
	Auto-merging read.txt
	CONFLICT (content): Merge conflict in read.txt
	Automatic merge failed; fix conflicts and then commit the result.

步骤7：	在本地解决冲突后，再次提交并Push。
	

------------------------------------------------------------------------------------

如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除

feature 分支修改内容后， 不进行add和commit，直接删除git branch -d feature,是否成功？
 	删除失败，因为没有提交的时候，无法切换到marter分支，故无法删除。
	
	add commit之后进行删除，提示删除失败。（原因没有合并）
	$ git branch -d feature
	error: The branch 'feature' is not fully merged.
	If you are sure you want to delete it, run 'git branch -D feature'.
	
	强制删除成功
	$ git branch -D feature
	Deleted branch feature (was 01f68e8).



------------------------------------------------------------------------------------

【添加一个bug_001分支，并在该分支上修改内容，之后合并到master。】


bug 分支 （dev提交）
步骤1： 在 dev_lxf上边修改，不git add,git commit,直接切换到master分支，查看内容。
	切换分支失败。
	报错 （提示在切换分支之前先提交更改或保存）：
	$ git checkout master
	error: Your local changes to the following files would be overwritten by checkout:
        	read.txt
	Please commit your changes or stash them before you switch branches.
	Aborting

步骤2：	在 dev_lxf上边修改，执行git add 不执行git commit,切换到master分支，查看内容。
	切换分支失败。
	报错，报错内容与步骤1一样。

步骤3：	在 dev_lxf上边修改，执行git add 并执行git commit,切换到master分支，查看内容。
	切换分支成功。

步骤4： 切换到Master分支之后，再创建一个bug分支，进行修复Bug，并合并到Master分支上。
	合并成功之后，再切换到dev_lxf分支上，进行修改。

步骤5：	在dev_lxf上边修改完之后，合并到Master。（会引起冲突吗？）
	不会引起冲突，合并成功。合并后的master会出现bug_001分支上的内容。
 	再次切换到dev_lxf,看不到bug_001分支上的内容。

步骤6：	push 到远程库。


-------------------------------------------------------------------------------------

【bug分支 不提交当前dev分支开发的内容，先保存起来，去修改Bug，修改之后再回到dev分支进行开发。】

bug 分支 （dev不提交）
git stash

如果当前在dev分支开发功能，此时有bug产生，但工作只进行了一半，没办法提交dev，则需要
使用 git stash 把当前场景储存起来，等以后恢复。

步骤1： 在dev分支中开发内容,不进行git add, git commit,直接git stash,将当前的分支保存起来。
	因为不提交，无法进行分支切换，当前的条件是不进行提交，用stash来进行保存后，再切换分支。
	
	git stash 之后 查看dev分支内容，dev的修改内容不见了，被保存到另一个地方。
	git stash 之后可以切换到master分支。
		
	$ git stash
	Saved working directory and index state WIP on dev_lxf: e1d9ce0 update master again

步骤2：	在master分支上创建一个bug_001分支，进行修改并合并。

步骤3：	切换到dev分支，查看内容，之前修改的内容看不到了，被git保存到了某个地方。
 	可以用git stash list 查看。
	$ git stash list
	stash@{0}: WIP on dev_lxf: e1d9ce0 update master again

步骤4： git stash apply 恢复保存的内容 stash内容并不删除（用git stash list仍可以看到）
	git stash drop  删除stash（用git stash list没有内容）
	
	git stash pop 恢复的同时把stash内容也删了,是上边两个命令的综合。


步骤5：	在dev_lxf上边修改完之后，合并到Master。
	

步骤6：	push 到远程库。


-------------------------------------------------------------------------------------

分支策略
比较 git merge 与 git merge --no-ff 的区别
git merge 默认合并的方式是 Fast forward，这种模式下，删除分支后，会丢掉分支信息。
git merge --no-ff 强制禁用Fash forward模式，git在merge（合并）时会生成一个新的commit,
          这样，从分支历史上就可以看出分支信息。

 
如果采用 ff 模式的，则直接把 master 的指针直接指向了 dev 分支的最新提交，
这样两个分支的最新提交的 commit id 就是一样的。


如果采用 --no-ff 模式合并分支，由于不能直接把 master 指针直接指向 dev 分支的最新提交， 
master 分支只能进行一次提交操作，导致内容一模一样，commit id 不同。

-------------------------------------------------------------------------------------

两个分支都有修改并提交，合并时会导致冲突。
冲突提示：
$ git merge dev
Auto-merging read.txt
CONFLICT (content): Merge conflict in read.txt
Automatic merge failed; fix conflicts and then commit the result.

CONFLICT 冲突

---------------------------------------------------------------------------------------
创建远程库 
1，查看主目录下有没有.ssh  (C:\Users\vn0umhp\.ssh)
2, 如果没有.ssh文件 要执行下边命令创建SSH Key：
ssh-keygen -t rsa -C "youremail@example.com" 邮件地址是你自己的github地址 
执行之后，C:\Users\vn0umhp\.ssh下边存在id_rsa和id_rsa.pub两个文件，
id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥

3，主目录下.ssh中存在id_rsa和id_rsa.pub两个文件之后，
登陆GitHub，打开“Account settings”，“SSH Keys”页面，
点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容。
点“Add Key”，你就应该看到已经添加的Key。

在GitHub中创建仓库
1，登录GitHub，点击 New repository创建一个仓库；
2，在Repository name中填入仓库名；
3，点击“Create repository”按钮，就成功地创建了一个新的Git仓库。

在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。
---------------------------------------------------------------------------------------------
把本地库推送到GitHub仓库中：
1，关联远程库，在本地仓库E:\learngit中运行命令：
$ git remote add origin git@github.com:michaelliao/learngit.git
michaelliao替换成自己的GitHub账户名，origin就是远程库的名字。

2，把本地库的所有内容推送到远程库中:
$ git push -u origin master

我执行命令的时候报错：
vn0umhp@WDWSPC093 MINGW64 /e/learngit (master)
$ git push -u origin master
ssh: connect to host github.com port 22: Connection refused
fatal: Could not read from remote repository.

原因是 主目录下的.ssh中缺少config文件；
解决方案： 
1）进入到主目录，创建一个config文件，因为无法cd 到.ssh目录，我直接在用户名目录下创建了一个config文件，创建之后再拷贝到.ssh目录下。
创建config文件用touch config命令。
vn0umhp@WDWSPC093 MINGW64 /e/learngit (master)
$ cd C:

vn0umhp@WDWSPC093 MINGW64 /c
$ cd Users

vn0umhp@WDWSPC093 MINGW64 /c/Users
$ cd vn0umhp

vn0umhp@WDWSPC093 MINGW64 ~
$ touch config

2）在confing中编辑如下内容：
Host github.com  
User xxxxx@xx.com  
Hostname ssh.github.com  
PreferredAuthentications publickey  
IdentityFile ~/.ssh/id_rsa  
Port 443

xxxxx@xx.com 是你注册github的邮箱
编辑保存之后，重新执行推送一下就成功了。

-----------------------------------------------------------------------------------------
SSH警告：
当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：
The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.
RSA key fingerprint is xx.xx.xx.xx.xx.
Are you sure you want to continue connecting (yes/no)?
这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。

Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：

Warning: Permanently added 'github.com' (RSA) to the list of known hosts.
这个警告只会出现一次，后面的操作就不会有任何警告了。

-----------------------------------------------------------------------
git status 修改的内容已经git add到暂存区时的提示内容： 
$ git status
On branch master
Your branch is up to date with 'origin/master'.

Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        modified:   read.txt

----------------------------------------------------------------------------

git status 修改的内容没有git add 到暂存区的提示内容： 
On branch master
Your branch is up to date with 'origin/master'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   read.txt

no changes added to commit (use "git add" and/or "git commit -a")

-----------------------------------------------------------------------------

git status 没有修改内容的提示内容：
On branch master
Your branch is up to date with 'origin/master'.

nothing to commit, working tree clean

------------------------------------------------------------------------------
mac 
mac自带Git，不用安装。
which  git  可以直接找出Git的安装目录 
直接使用命令关联远程仓库 
ssh-keygen -t rsa -C "youremail@example.com" 邮件地址是你自己的github地址
把生成的SSH公钥写进GitHub（与windows方法一致）

------------------------------------------------------------------------------
git pull origin master 
git 在pull或者合并分支的时候有时会遇到这个界面,意思是需要你 输入提交消息来解释为什么这种合并是必要的

窗口内容：
please enter a commit message to explain why this merge is necessary,
especially if it merges an updated upstream into a topic branch.

Lines starting with '#' will be ignored, and an empty message aborts the commit.

两种解决方案： 
第一：

1.按键盘字母 i 进入insert模式

2.修改最上面那行黄色合并信息
第二：
1.按键盘左上角"Esc"

2.输入冒号加wq   ":wq",  按回车键，意思就是就是忽略这个提示

--------------------------------------------------------------------------------

关联远程库报错：

错误1： 关联远程库前提需要在GitHub上边创建一个远程仓库，否则会关联失败。

错误2： $ git remote add origin git@github.com:ddxflqm/learnPy.git
	fatal: remote origin already exists.
	解决方案：
	
	$ git remote rm origin 删除关联

	$ git remote add origin git@github.com:ddxflqm/learnPy.git 重新关联

-----------------------------------------------------------------------------------

rm -rf .git  目录取消Git仓库

$ cd e:/work
vn0umhp@WDWSPC093 MINGW64 /e/work (master)
$ ls -ah
./  ../  .git/  HTMLTestRunner/  HTTP/  py/  RF/  工作日志.xls
vn0umhp@WDWSPC093 MINGW64 /e/work (master)
$ rm -rf .git
vn0umhp@WDWSPC093 MINGW64 /e/work
$ ls -ah
./  ../  HTMLTestRunner/  HTTP/  py/  RF/  工作日志.xls 

------------------------------------------------------------------------------------
 